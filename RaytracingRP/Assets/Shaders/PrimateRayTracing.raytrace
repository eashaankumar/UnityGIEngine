#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#include "RayPayload.hlsl"
#include "Utils.hlsl"

#pragma max_recursion_depth 10
//#pragma enable_ray_tracing_shader_debug_symbols

// Input
RaytracingAccelerationStructure g_SceneAccelStruct;
float4x4 								g_InvViewMatrix;
float4x4 								g_ViewMatrix;
float                                   g_Zoom;
float                                   g_dt;
TextureCube<float4>                     g_EnvTex;
SamplerState                            sampler_linear_repeat;

// Output
RWTexture2D<float4> 					g_PrimateRayOutput;
RWTexture2D<float4> 					g_PrimateSkyboxOutput;
RWTexture2D<float4> 					g_PrimateNormalDepth;
RWTexture2D<float4> 					g_DirectDiffuse;
RWTexture2D<float4> 					g_IndirectDiffuse;
RWTexture2D<float4> 					g_WorldPosBuffer;
RWTexture2D<float4> 					g_MotionBuffer;

[shader("miss")]
void MainMissShader1_DiffuseRayInitial(inout RayPayload payload : SV_RayPayload)
{
    // skybox wipes all albedo and energy (since each ray is locally fired)
	payload.energy = 0.1;//g_EnvTex.SampleLevel(sampler_linear_repeat, WorldRayDirection(), 0) * 2;
    payload.worldPos.w = 0;
}

/*[shader("miss")]
void MainMissShader2_Shadow(inout RayPayloadShadow payload : SV_RayPayload)
{
    // The ray "hit" the light.
	payload.shadowValue = 1;//1.0;
}*/

void TracePrimateRay()
{
    uint2 LaunchIndex = DispatchRaysIndex().xy;
    uint2 LaunchDim = DispatchRaysDimensions().xy;

    float2 frameCoord = float2(LaunchIndex.x, LaunchDim.y - LaunchIndex.y - 1) + float2(0.5, 0.5);

    // The ray origin is the camera position in world space.
    float3 rayOrigin = float3(g_InvViewMatrix[0][3], g_InvViewMatrix[1][3], g_InvViewMatrix[2][3]);

    float2 ndcCoords = frameCoord / float2(LaunchDim.x - 1, LaunchDim.y - 1);
        
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    float aspectRatio = (float)LaunchDim.x / (float)LaunchDim.y;

    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, -1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = normalize(mul((float3x3)g_InvViewMatrix, viewDirection));

    RayDesc ray;
    ray.Origin = rayOrigin;
    ray.Direction = rayDirection;
    ray.TMin = 0;
    ray.TMax = 1e10f;
        
    RayPayload payload;   
    payload.rayType = 0;
    payload.primateNormal = float3(0, 0, 0);
    payload.primateColor = float4(0, 0, 0, 0);
    payload.color = float4(0, 0, 0, 0);
    payload.worldPos = float4(0, 0, 0, 1);
	payload.bounceIndex = 0;
    
    TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, 0, ray, payload);

    // ignore skybox, just raw albedo

    g_PrimateRayOutput[frameCoord] = payload.primateColor;
    g_PrimateSkyboxOutput[frameCoord] = payload.energy;
    
    // vel buffer calculations
    float4 prevPos = g_WorldPosBuffer[frameCoord]; 
    float4 pos = payload.worldPos;
    float3 a = pos.xyz / pos.w;
    float3 b = prevPos.xyz / prevPos.w;
    g_MotionBuffer[frameCoord] = float4((a-b) , 1);
    g_WorldPosBuffer[frameCoord] = payload.worldPos;

    float4 normalDepth = 0;
    normalDepth.xyz = payload.primateNormal;
    normalDepth.w = 1.0 / distance(payload.worldPos.xyz, rayOrigin);
    g_PrimateNormalDepth[frameCoord] = normalDepth;
}

void TraceDirectDiffuse()
{
    // Direct Diffuse (Sunlight only)
    int2 launchIndex = uint2(DispatchRaysIndex().x, DispatchRaysDimensions().y - DispatchRaysIndex().y - 1);
    uint2 launchDim = DispatchRaysDimensions().xy;

    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);
     // Initial random number generator seed for this pixel. The rngState will change every time we draw a random number.
    
    int convergenceStep = 0;
    uint g_FrameIndex = 0;
    uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(convergenceStep + g_FrameIndex) * uint(26699)) | uint(1);

    float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);
    float2 ndcCoords = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);

    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    float aspectRatio = (float)launchDim.x / (float)launchDim.y;

    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, -1));

    // Rotate the ray from view space to world space.
    float3 rayOrigin = float3(g_InvViewMatrix[0][3], g_InvViewMatrix[1][3], g_InvViewMatrix[2][3]);
    float3 rayDirection = normalize(mul((float3x3)g_InvViewMatrix, viewDirection));
    
    uint missShaderIndex = 0;
    RayDesc ray;
    ray.Origin = rayOrigin;
    ray.Direction = rayDirection;
    ray.TMin = 0;
    ray.TMax = 1e10f;
        
    RayPayload payload;   
    payload.rayType = 1;
    payload.bounceRayOrigin = float3(0, 0, 0);
    payload.bounceRayDir = float3(0, 0, 0);
    payload.primateNormal = float3(0, 0, 0);
    payload.primateColor = float4(0, 0, 0, 0);
    payload.color = float4(1, 1, 1, 1);
    payload.worldPos = float4(0, 0, 0, 1);
    payload.energy = 0;
	payload.bounceIndex = 0;
    payload.rngState = rngState;
    
    // first lets get back to the object contact point
    TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
    
    float4 directDiffuseGI = payload.energy;
    float4 indirectDiffuseGI = 0;

    float4 allColors = payload.color;

    if (payload.bounceIndex > 0)
    {
        uint bounceIndex = payload.bounceIndex;
        // hit
        // update second ray info from payload.bounceRay
        RandomFloat01(payload.rngState);
        ray.Origin = payload.bounceRayOrigin;
        ray.Direction = payload.bounceRayDir;
        payload.rayType = 1;
        payload.energy = 0;
        //payload.color = 0;
        TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
        directDiffuseGI += payload.energy;
        allColors *= payload.color;

        // if we still did not hit skybox, send ANOTHER ray for INDIRECT DIFFUSE (raytype = 2)
        
        if (payload.bounceIndex > 1)
        {
            payload.rayType = 2;
            RandomFloat01(payload.rngState);
            ray.Origin = payload.bounceRayOrigin;
            ray.Direction = payload.bounceRayDir;
            //payload.color = 0; // ignore any color transfers (cause we can only afford 1 indirect ray...we dont know if this point will be illuminated...otherwise you would get indirect "glow", or light even if its dark outside)
            payload.energy = 0;
            // just the illuminance
            TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

            indirectDiffuseGI = (allColors + directDiffuseGI) * payload.energy;            
        }
        else
        {
            indirectDiffuseGI = float4(0, 0, 0, 0);
        }
    }
    else
    {
        directDiffuseGI = float4(0, 0, 0, 0);
    }

    // ignore actual skybox, just the light emitted by the skybox which is touhcing surface

    g_DirectDiffuse[frameCoord] = directDiffuseGI;
    g_IndirectDiffuse[frameCoord] = indirectDiffuseGI;
}

[shader("raygeneration")]
void MainRayGenShader()
{ 
	uint2 LaunchIndex = DispatchRaysIndex().xy;
    uint2 LaunchDim = DispatchRaysDimensions().xy;

    float2 frameCoord = float2(LaunchIndex.x, LaunchDim.y - LaunchIndex.y - 1) + float2(0.5, 0.5);
    TracePrimateRay();
    
    TraceDirectDiffuse();

    /*g_PrimateRayOutput[frameCoord] *= (g_IndirectDiffuse[frameCoord] + g_DirectDiffuse[frameCoord]) ;

    g_PrimateRayOutput[frameCoord] += g_PrimateSkyboxOutput[frameCoord];*/

    //g_PrimateRayOutput[frameCoord] = g_MotionBuffer[frameCoord];
}
